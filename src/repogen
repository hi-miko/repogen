#!/usr/bin/bash

SCRIPT_VERSION="0.6"

cleanup()
{
	cd "$1" || (echo "Error: could not go into the given directory" && exit 1)
	rm -rI src/ tests/ docs/ private/ README.md CHANGELOG.md .editorconfig .gitignore
	if [ "$INGNORE_LICENSE" != "1" ]
	then
		rm LICENSE
	fi
	rm -rf .git
}

helptext()
{
	printf "Usage:\n"
	printf "	repogen [FLAGS] [DIR]\n"
	printf "Args:\n"
	printf "	[DIR] -> optional argument that specifies where the repository should be created (defaults to the current directory).\n"
	printf "Flags:\n"
	printf "	'--name | -n <name>' -> The name of your remote repository\n"
	printf "	'--url | -u <url>' -> The url of your remote repository\n"
	printf "	'--license | -l [MIT | GPL3]' -> The license of your project\n"
	printf "	'--help | -h' -> Displays this text and exits\n"
	printf "	'--version' -> Displays the version of this script and exits\n"
	printf "	'--ignore-license' -> tells the script to not add a license\n"
}

selects()
{
	printf "Enter the directory for the repository to be created in: "
	read DIR
	
	DIR="$(realpath "$DIR" 2>/dev/null)"
	
	if [ "$?" != "0" ]
	then
		echo "Error: the given directory does not exist"
		exit 1
	fi

	printf "Enter the name of your repository: "
	read NAME

	printf "Enter the url (web or ssh) of your repository: "
	read URL
	
	if [ "$INGNORE_LICENSE" != "1" ]
	then
		PS3='Select your license: '
		options=("MIT" "GPL3" "quit")
		select opt in "${options[@]}"
		do
			case $opt in
				"MIT" | "GPL3")
					LICENSE="$opt"
					break
					;;
				"quit")
					exit 0
					;;
				*)
					echo "invalid option $REPLY"
					;;
			esac
		done
	fi

	printf "dir: '$DIR'\nname: '$NAME'\nurl: '$URL'\nlicense: '$LICENSE'\n"

	PS3="Confirm selection:"
	options=( "yes" "no" "quit")
	select opt in "${options[@]}"
	do
		case $opt in
			"yes")
				break
				;;
			"no")
				selects
				break
				;;
			"quit")
				exit 0
				;;
			*)
				echo "invalid option $REPLY"
				;;
		esac
	done
}

# Git workflow to automize:
#	 1) create files and folders (src/, tests/, docs/, private/, LICENSE, README.md, CHANGELOG.md)
#	 2) add relevant things to the files (pick LICENSE, add PLACEHOLDER to README.md and add header to CHANGELOG.md)
#	 3) git init
#	 4) git add all files (don't add folders cause it would be a pain having to add only folders that users add files to)
#	 5) git commit -m "Initial commit"
#	 6) ask user for <name> and <url> of remote repo
#	 7) git remote add <name> <url>
#	 8) git push --set-upstream <name> main

# get arguments from the commandline with getopt

# What are going to be the arguments that I am allowed to parse?
#	- Instantly add the <name> and <url>? With something like --name -n <name> and --url -u <url>
# 	- Where to create the folders and files (defaults to ./): --dir -d <directory> <- maybe this shouldn't be a flag, but rather an arg
#	- Add a license to pick, so we dont have to ask: --license -l <license>
#	- Add an obligatory help test: --help -h
#	- And for the fuck of it add a version test: --version -v
PARSED_ARGUMENTS=$(getopt -n repogen -o n:u:l:hv --long name:,ignore-license,url:,license:,help,version -- "$@")

if [ "$?" != "0" ]; then
	echo "Error: invalid usage: "
	helptext
	exit 1
fi

while :
do
	case "$1" in
		-n | --name)
			NAME="$2"
			shift 2
			;;
		-u | --url)
			URL="$2"
			shift 2
			;;
		-l | --license)
			LICENSE="$2"
			if [ "$LICENSE" != "MIT" ] && [  "$LICENSE" != "GPL3" ]
			then
				echo "Error: Invalid license: '$LICENSE'"
				exit 1
			fi
			shift 2
			;;
		--ignore-license)
			INGNORE_LICENSE="1"
			shift 1
			;;
		-h | --help)
			helptext
			exit 0
			;;
		-v | --version)
			printf "repogen "
			printf "$SCRIPT_VERSION\n"
			exit 0
			;;
		--)
			shift 1
			break
			;;
		*)
			break
			;;
	esac
done

if [ "$INGNORE_LICENSE" == "1" ]
then 
	LICENSE="*IGNORED*"
fi

if [ "$#" != 1 ] && [ "$#" != 0 ]
then
	echo "Error: expected at most one argument after falgs"
	exit 1
fi

if [ "$#" == 1 ]
then
	DIR="$(realpath "$1" 2>/dev/null)"
else
	printf "Enter the directory for the repository to be created in: "
	read DIR
	DIR="$(realpath "$DIR" 2>/dev/null)"
fi

if [ "$?" != "0" ]
then
	echo "Error: the given directory does not exist"
	exit 1
fi

if [ "$NAME" == "" ]
then
	printf "Enter the name of your repository: "
	read NAME
fi

if [ "$URl" == "" ]
then
	printf "Enter the url (web or ssh) of your repository: "
	read URL
fi

PS3='Select your license: '
options=("MIT" "GPL3" "quit")
if [ "$LICENSE" == "" ] && [ "$INGNORE_LICENSE" != "1" ]
then
	select opt in "${options[@]}"
	do
		case $opt in
			"MIT" | "GPL3")
				LICENSE="$opt"
				break
				;;
			"quit")
				exit 0
				;;
			*)
				echo "invalid option $REPLY"
				;;
		esac
	done
fi

printf "dir: '$DIR'\nname: '$NAME'\nurl: '$URL'\nlicense: '$LICENSE'\n"

PS3="Confirm selection:"
options=("yes" "no" "quit")
select opt in "${options[@]}"
do
	case $opt in
		"yes")
			break
			;;
		"no")
			selects
			break
			;;
		"quit")
			exit 0
			;;
		*)
			echo "invalid option $REPLY"
			;;
	esac
done

cd "$DIR" || (echo "Error: could not go into the given directory" && exit 1)
#	 1) create files and folders (src/, tests/, docs/, private/, LICENSE, README.md, CHANGELOG.md)
mkdir src
mkdir tests
mkdir docs
mkdir private

echo "# PLACEHOLDER" > README.md
echo "# Change Log" > CHANGELOG.md
touch .gitignore
touch .editorconfig

## LICENSE REDIRECT

if [ "$LICENSE" == "MIT" ]
then
	$(cat ~/Documents/licenses/MIT_LICENSE > LICENSE)
elif [ "$LICENSE" == "GPL3" ]
then
	$(cat ~/Documents/licenses/GPL3_LICENSE > LICENSE)
else
	touch LICENSE
fi

git init
git remote add "$NAME" "$URL"
if [ "$?" != "0" ]
then
	echo "Error: could not remote add '$URL'"
	cleanup $(pwd)
	exit 1
fi

git add README.md CHANGELOG.md .gitignore .editorconfig
if [ "$?" != "0" ]
then
	echo "Error: could add files"
	cleanup $(pwd)
	exit 1
fi

git add LICENSE

if [ "$?" != "0" ]
then
	echo "Error: could add the license"
	cleanup $(pwd)
	exit 1
fi

git commit -m "initial commit"
if [ "$?" != "0" ]
then
	echo "Error: could not commit"
	cleanup $(pwd)
	exit 1
fi

git push --set-upstream "$NAME" main
if [ "$?" != "0" ]
then
	echo "Error: could not push"
	cleanup $(pwd)
	exit 1
fi
